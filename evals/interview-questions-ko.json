{
  "description": "Korean technical interview questions dataset",
  "version": "1.0",
  "questions": [
    {
      "id": "ko-tech-001",
      "question": "RESTful API와 GraphQL API의 차이점에 대해 설명해주세요.",
      "answer": "RESTful API는 자원(Resource) 중심의 아키텍처로, HTTP 메서드(GET, POST, PUT, DELETE)를 활용하여 데이터를 조작합니다. Stateless하며 캐싱이 용이한 장점이 있습니다. 반면 GraphQL은 단일 엔드포인트를 통해 클라이언트가 필요한 데이터만 정확히 요청할 수 있는 쿼리 언어입니다. Over-fetching과 Under-fetching 문제를 해결할 수 있어, 모바일 앱처럼 네트워크 효율성이 중요한 환경에서 유리합니다.",
      "category": "API Design",
      "difficulty": "intermediate",
      "jobRole": ["backend", "fullstack"]
    },
    {
      "id": "ko-tech-002", 
      "question": "데이터베이스에서 인덱스(Index)의 동작 원리와 언제 사용해야 하는지 설명해주세요.",
      "answer": "인덱스는 데이터베이스에서 검색 성능을 향상시키기 위한 자료구조입니다. 일반적으로 B-tree 구조를 사용하여 O(log n) 시간복잡도로 데이터를 찾을 수 있습니다. 인덱스가 없다면 테이블 전체를 스캔해야 하지만, 인덱스를 통해 원하는 데이터의 위치를 빠르게 찾을 수 있습니다. 하지만 인덱스는 추가 저장공간을 필요로 하고, 데이터 변경 시 인덱스도 함께 업데이트해야 하므로 INSERT, UPDATE, DELETE 성능에 영향을 줍니다.",
      "category": "Database",
      "difficulty": "intermediate",
      "jobRole": ["backend", "fullstack"]
    },
    {
      "id": "ko-tech-003",
      "question": "React에서 useState와 useEffect의 차이점과 각각 언제 사용하는지 설명해주세요.",
      "answer": "useState는 함수형 컴포넌트에서 상태를 관리하기 위한 Hook입니다. 상태 값과 상태를 변경하는 함수를 배열 형태로 반환하며, 상태가 변경되면 컴포넌트가 리렌더링됩니다. useEffect는 컴포넌트에서 사이드 이펙트를 처리하기 위한 Hook으로, API 호출, DOM 조작, 구독 설정 등에 사용됩니다. useEffect는 컴포넌트가 렌더링된 후에 실행되며, 의존성 배열을 통해 언제 실행될지 제어할 수 있습니다.",
      "category": "React",
      "difficulty": "beginner",
      "jobRole": ["frontend", "fullstack"]
    },
    {
      "id": "ko-tech-004",
      "question": "JavaScript에서 Promise와 async/await의 차이점과 각각의 장단점을 설명해주세요.",
      "answer": "Promise는 비동기 작업의 완료 또는 실패를 나타내는 객체로, pending, fulfilled, rejected 세 가지 상태를 가집니다. .then()과 .catch()를 체이닝하여 비동기 작업을 처리하지만, 중첩이 깊어지면 콜백 지옥과 유사한 문제가 발생할 수 있습니다. async/await는 Promise 기반의 문법적 설탕으로, 비동기 코드를 동기 코드처럼 작성할 수 있게 해줍니다. async/await는 코드 가독성이 좋고 디버깅이 쉽지만, 병렬 처리를 위해서는 Promise.all() 등과 함께 사용해야 합니다.",
      "category": "JavaScript",
      "difficulty": "intermediate",
      "jobRole": ["frontend", "backend", "fullstack"]
    },
    {
      "id": "ko-tech-005",
      "question": "마이크로서비스 아키텍처의 장단점과 언제 도입해야 하는지 설명해주세요.",
      "answer": "마이크로서비스 아키텍처는 애플리케이션을 독립적으로 배포 가능한 작은 서비스들로 분해하는 아키텍처 패턴입니다. 장점으로는 각 서비스를 독립적으로 개발/배포/확장할 수 있고, 기술 스택의 다양성을 허용하며, 장애 격리가 가능합니다. 하지만 서비스 간 통신의 네트워크 지연, 분산 트랜잭션의 복잡성, 운영 복잡도 증가, 디버깅의 어려움 등의 단점도 있습니다. 팀 규모가 크고, 도메인이 명확히 분리되며, 각 서비스의 독립적인 배포와 확장이 중요한 경우에 도입을 고려해야 합니다.",
      "category": "System Architecture",
      "difficulty": "advanced",
      "jobRole": ["backend", "fullstack"]
    }
  ]
}
